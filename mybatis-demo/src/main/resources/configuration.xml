<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--引入外部properties配置-->
    <properties resource="application.properties"></properties>
    <settings>   <!--以下设置均为默认设置-->
        <!--全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。-->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载的全局开关。默认false当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--默认true，true：懒加载的对象可能被任何懒属性全部加载-->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--是否允许单一语句返回多结果集（需要兼容驱动）-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--使用列标签代替列名。不同的驱动在这方面会有不同的表现-->
        <setting name="useColumnLabel" value="true"/>
        <!--允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。
         FULL 会自动映射任意复杂的结果集（无论是否嵌套）。-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--
            指定发现自动映射目标未知列（或者未知属性类型）的行为。
            NONE: 不做任何反应
            WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
            FAILING: 映射失败 (抛出 SqlSessionException)
        -->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!--
        	配置默认的执行器(executor)。
        	SIMPLE 就是普通的执行器； 默认
        	REUSE 执行器会重用预处理语句（prepared statements）；
        	BATCH 执行器将重用语句并执行批量更新
        -->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置超时时间，它决定驱动等待数据库响应的秒数。-->
        <setting name="defaultStatementTimeout" value="25"/>
        <!--为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。-->
        <setting name="defaultFetchSize" value="100"/>
        <!--允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。-->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <!--
        MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。
         若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。
        -->
        <setting name="localCacheScope" value="SESSION"/>
        <!--
        当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，
        比如 NULL、VARCHAR 或 OTHER。
        -->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定哪个对象的方法触发一次延迟加载。-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
    </settings>
    <typeAliases>
        <!--也可以在类上面使用 @Alias(value="User") 则以注解为别名  -->
        <typeAlias alias="user" type="org.chris.mybatis.entity.User" />
        <typeAlias alias="role" type="org.chris.mybatis.entity.Role"/>
        <!-- 根据包取别名，把包下面的所有类都按类名来取别名 -->
        <!-- 这用可以简化代码量 -->
        <package name="org.chris.mybatissqlsessionfactory.entity" />
    </typeAliases>
    <objectFactory type="org.chris.mybatis.test.ExampleObjectFactory">
        <property name="someProperty" value="100"/>
    </objectFactory>
    <!--
    在configuration节点之下，我们可以配置10个子节点， 分别为：properties、typeAliases、plugins、objectFactory、
    objectWrapperFactory、settings、environments、databaseIdProvider、typeHandlers、mappers
    -->
    <!--
        typeHandlers 类型处理器
        objectFactory 对象工厂lazyLoadingEnabled
        plugins 插件
        databaseIdProvider 数据库厂商标识
        mappers 映射器
     -->
   <environments default="development">
       <environment id="development">
           <!-- 配置事务管理 ，采用JDBC管理事务-->
            <transactionManager type="JDBC" />
            <!-- POOLED是mybatis的 数据源 -->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver-class-name}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
       <!--测试环境-->
       <environment id="test">
           <!-- 配置事务管理 ，采用JDBC管理事务-->
           <transactionManager type="JDBC" />
           <!-- POOLED是mybatis的 数据源 -->
           <dataSource type="POOLED">
               <property name="driver" value="${jdbc.driver-class-name}"/>
               <property name="url" value="${jdbc.url}"/>
               <property name="username" value="${jdbc.username}"/>
               <property name="password" value="${jdbc.password}"/>
           </dataSource>
       </environment>
       <!--生产环境-->
       <environment id="pro">
           <!-- 配置事务管理 ，采用JDBC管理事务-->
           <transactionManager type="JDBC" />
           <!-- POOLED是mybatis的 数据源 -->
           <dataSource type="POOLED">
               <property name="driver" value="${jdbc.driver-class-name}"/>
               <property name="url" value="${jdbc.url}"/>
               <property name="username" value="${jdbc.username}"/>
               <property name="password" value="${jdbc.password}"/>
           </dataSource>
       </environment>
       <!--预发布环境  id=uat-->
    </environments>
    <!--数据库厂商标识-->
    <!--自定义厂商标识  type="自己的databaseIdProvider接口实现类" -->
    <databaseIdProvider type="DB_vendor">
        <property name="SQL" value="sqlserver" />
        <property name="MySQL" value="mysql" />
        <property name="DB2" value="db2" />
        <property name="Oracle" value="oracle" />
    </databaseIdProvider>

    <!--mappers可以有多个-->
    <mappers>
        <!--单个加载-->
        <mapper resource="mapper/RoleMapper.xml" />
        <mapper resource="mapper/UserMapper.xml"/>

        <!-- 批量加载mapper
            指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载，
            遵循一定规范，需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在同一个目录下
            上边规范的前提是：使用的是mapper代理方法
        -->
        <package name="org.chris.mybatissqlsessionfactory.mapper"/>
    </mappers>
</configuration>