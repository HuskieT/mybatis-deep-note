<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.chris.mybatis.mapper.RoleMapper">
    <!-- 缓冲  -->
    <cache eviction="LRU" flushInterval="1000" size="512" readOnly="true"></cache>

    <!-- 自定义返回结果集 -->
    <!--id元素：表示查询结果集中的唯一标识。column是查询出来的列名，property是type指定的pojo类型中的字段名，
    最终resultMap对column和property做一个映射关系-->
    <resultMap id="roleMap" type="role">
        <!--用于设置主键字段与领域模型属性的映射关系-->
        <id property="id" column="id" javaType="java.lang.Integer" jdbcType="INTEGER"></id>
        <!--用于设置普通字段与领域模型属性的映射关系-->
        <result property="roleName" column="role_name" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <result property="note" column="note" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <result property="createDate" column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP"></result>
    </resultMap>

    <resultMap id="roleMap1" type="role">
        <!-- <constructor> 指定使用指定参数列表的构造函数来实例化领域模型。注意：其子元素顺序必须与参数列表顺序对应-->
        <constructor>
            <!--idArg 标记该入参为主键-->
            <idArg column="id" javaType="java.lang.Integer"/>
            <!--arg 标记该入参为普通字段(主键使用该子元素设置也是可以的)-->
            <arg column="roleName" javaType="java.lang.String"/>
            <arg column="note" javaType="java.lang.String"/>
            <arg column="createDate" javaType="java.util.Date"/>
        </constructor>
    </resultMap>

    <!-- Sql块 -->
    <sql id="selectAll">
        select * from
    </sql>

    <!--resultMap属性：指定定义的resultMap的id，如果这个resultMap在其它的mapper文件，前边需要加namespace-->
    <select id="getAll"        resultMap="roleMap" >
        <include refid="selectAll"/>  t_role
    </select>

    <select id="getRoleById" parameterType="Integer" resultType="role" >
        select * from t_role where id = #{id}
    </select>

    <!-- 查询结果以 字段-值 的形式分装到map中 -->
    <select id="getRoleMap" resultType="map" parameterType="Integer" >
        select * from t_role where id = #{id}
    </select>

    <!-- 多个相同参数可用0,1....来表示进行传参。 map传参法-->
    <select id="getEntity" resultType="role" parameterType="hashmap" >
        select * from t_role where roleName = #{0} and remark = #{1} and createDate = #{2}
    </select>
    <!--@Param注解传参法 -->
    <select id="getEntity1" resultType="role"  >
        select * from t_role where roleName = #{roleName} and note = #{remark} and createDate = #{createDate}
    </select>
    <!--Java Bean传参法     #{}里面的名称对应的是User类里面的成员属性。-->
    <select id="getEntity2" resultType="role" parameterType="role"  >
        select * from t_role where roleName = #{roleName} and note = #{note} and createDate = #{createDate}
    </select>
    <!--list in的使用-->
    <select id="getRoleList" resultType="role"   >
        select * from t_role where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
              #{item}
        </foreach>
    </select>
    <!--map list 嵌套的使用-->
    <select id="getRoles" resultType="role"   >
        select * from t_role where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
        and roleName = #{roleName}
    </select>

    <!--动态sql-->
    <!--<where>可以自动处理第一个and-->
    <select id="getRole1" resultType="role" parameterType="role" >
        <include refid="selectAll"/>
        t_role
        <where>
            <if test="id!=null and id!=''">
                id=#{id}
            </if>
            <if test="roleName!=null and roleName!=''">
                roleName=#{roleName}
            </if>
            <if test="note!=null and note!=''">
                remark=#{remark}
            </if>
            <if test="createDate!=null">
                createDate=#{createDate}
            </if>
        </where>
    </select>

    <!--mybatis trim标签的使用 -->
    <!--
        trim 属性
    　　prefix：前缀
    　　suffix：后缀
    　　prefixOverrides：忽略第一个指定分隔符
    　　suffixOverrides：会略最后一个分隔符
    -->

    <select id="getRole2" resultType="role" parameterType="role" >
        <include refid="selectAll"/>
        t_role
        <!--忽略拼接时的第一个and或者or-->
        <trim prefix="WHERE" prefixOverrides="and | or">
                    <if test="id!=null and id!=''">
                        id=#{id}
                    </if>
                    <if test="roleName!=null and roleName!=''">
                        and roleName=#{roleName}
                    </if>
                    <if test="note!=null and note!=''">
                        and remark=#{remark}
                    </if>
                    <if test="createDate!=null">
                        and createDate=#{createDate}
                    </if>
        </trim>
    </select>

    <!--choose标签的使用-->
    <select id="getRole3" resultType="role" parameterType="role" >
        <include refid="selectAll"/>
        t_role
        <choose>
            <when  test="id!=null and id!=''">
                AND  id=#{id}
            </when>
            <when test="roleName != null and roleName!=''">
                AND  roleName=#{roleName}
            </when>
            <when test="note!=null and note!=''">
                AND  remark=#{remark}
            </when>
            <otherwise>
                AND createDate != null
            </otherwise>
        </choose>
    </select>





    <!--还可以设置属性值来使得定义的sql代码段不断变化。-->
    <sql id="userColumns"> ${alias}.id,${alias}.name,${alias}.age</sql>
    <select id="selectUsers" resultType="map">
        select
        <include refid="userColumns"><property name="alias" value="t1"/></include>,
        <include refid="userColumns"><property name="alias" value="t2"/></include>
        from user t1
        cross join some_table t2
    </select>





    <!-- insert,并且获得且返回主键,赋给bookid;
            useGeneratedKeys="true":返回主键;
            keyProperty="bookid":主键赋值到的属性   -->
    <insert id="insert" parameterType="role" >
         insert into t_role (roleName,note,createDate) values (#{roleName},#{remark},#{createDate,jdbcType=DATE})
    </insert>

    <!-- 多个相同参数可用0,1....来表示进行传参。 -->
    <insert id="insert1" parameterType="string">
        insert into t_role (roleName,note,createDate) values (#{0},#{1},#{2})
    </insert>

    <!--mybatis foreach标签的使用（可做批量添加、修改、删除） -->
    <!--
    　collection：要循环的集合
　　　index：定一个名字，用于表示在迭代过程中，每次迭代到的位置（index为数组的下标）
　　　item：集合中每一个元素进行迭代时的别名
　　　open：以什么开始
　　　close：以什么结束
　　　separator：循环内容之间以什么分隔
    -->
    <!--　若list有两条数据 则执行的sql语句为类似这种
　　　　　　insert into user(id,name,gender) values ("1","张三","男"),("2","李四","女")-->
    <insert id="insert2" parameterType="List">
        insert into t_role (roleName,note,createDate) values
        <foreach collection="list" item="role" open="(" close=")" separator=",">
            #{role.roleName},#{role.note},#{role.createDate}
        </foreach>
    </insert>



    <!--update 与set标签使用-->
    <update id="update"  timeout="30" parameterType="role">
        update role
        <set>
            <if test="roleName!=null and roleName!=''">
                roleName=#{roleName}
            </if>
            <if test="note!=null and note!=''">
                note=#{note}
            </if>
            <if test="createDate!=null">
                createDate=#{createDate}
            </if>
        </set>
    </update>


    <!-- delete -->
    <delete id="delete" parameterType="Integer">
            delete from t_role where id=#{id}
    </delete>








    <!--5.2 if-->
    <select id="findRolesIf" parameterType="string" resultType="org.chris.mybatis.entity.Role">
        select id,role_name as roleName,note from t_role where 1=1
        <if test="roleName!=null and roleName!=''">
            and role_name like concat('%',#{roleName},'%')
        </if>
    </select>

    <!-- 5.3 choose,when,otherwise元素 -->
    <select id="findChooseWhenOtherWise" parameterType="string" resultType="org.chris.mybatis.entity.Role">
        select id,role_name as roleName,note from t_role
        where 1=1
        <choose>
            <when test="id!=null and id!=''">
                and id=#{id}
            </when>
            <when test="roleName !=null and roleName!=''">
                and role_name like concat('%',#{roleName},'%')
            </when>
            <otherwise>
                and note is not null
            </otherwise>
        </choose>
    </select>
    <!-- 5.3 choose,when,otherwise元素end -->

    <!-- 5.4 trim,where,set元素 -->
    <select id="findWhere" parameterType="string" resultType="org.chris.mybatis.entity.Role">
        select id,role_name as roleName,note from t_role
        <where>
            <if test="roleName!=null and roleName!=''">
                and role_name like concat('%',#{roleName},'%')
            </if>
        </where>
    </select>

    <select id="findRoleTrim" parameterType="string" resultType="org.chris.mybatis.entity.Role">
        select id,role_name as roleName,note from t_role
        <trim prefix="where" prefixOverrides="and">
            <if test="roleName!=null and roleName!=''">
                and role_name like concat('%',#{roleName},'%')
            </if>
        </trim>
    </select>

    <update id="updateRole" parameterType="org.chris.mybatis.entity.Role">
        update t_role
        <set>
            <if test="role!=null">
                <if test="role.roleName!=null and role.roleName!=''">
                    role_name=#{role.roleName},
                </if>
                <if test="role.note!=null and role.note !=''">
                    note=#{role.note}
                </if>
            </if>
        </set>
        where id=#{role.id}
    </update>

    <!-- 5.4 trim,where,set元素end -->

    <!-- 5.6 test属性 -->
    <select id="getRoleTest" parameterType="string" resultType="org.chris.mybatis.entity.Role">
        select id,role_name as roleName,note from t_role
        <if test="type='Y'">
            where 1=1
        </if>
    </select>
    <!-- 5.6 test属性end -->

    <!-- 5.7 使用bind元素 -->
    <select id="findRoleMulBind" resultType="org.chris.mybatis.entity.Role">
        <bind name="pattern_roleName" value="'%'+roleName+'%'"/>
        <bind name="pattern_note" value="'%'+note+'%'"/>
        select id,role_name as roleName,note from t_role
        where role_name like #{pattern_roleName}
        and note like #{pattern_note}
    </select>
    <!-- 5.7 使用bind元素end -->

    <insert id="test" parameterType="java.util.List">
        INSERT INTO `credit_dimension_description`(`id`, `name`, `dimension_id`, `dimension_code`, `description`, `create_date`, `modify_date`, `create_id`, `modify_id`) VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (
            (SELECT REPLACE(UUID(), '-', '') AS id),
            #{item},
            null,
            null,
            null,
            '2019-09-05 16:51:06',
            '2019-09-05 16:51:09',
            '-1',
            '-1' )
        </foreach>
    </insert>
</mapper>